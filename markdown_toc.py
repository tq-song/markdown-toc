import os
import argparse
import re

toc_info = '<!-- Generated by markdown_toc(Do not delete.) -->\n'

def delete_toc(md_text):
    start = md_text.find(toc_info)
    end = md_text.rfind(toc_info) + len(toc_info) + 1
    if (start + len(toc_info) + 1) == end:
        return md_text
    new_text = md_text[:start] + md_text[end:]
    return new_text


def create_index(md_text, depth=3):
    lines = iter(md_text.splitlines())
    new_text = ''
    index = [0] * depth
    for line in lines:
        for i in range(depth):
            head = '#' * (i+2)
            try:
                sep = next(re.finditer('^ *(%s) '%(head), line)).end()
                index[i] += 1
                index_text = '.'.join(list(map(str, index[:i+1])))
                line = line[:sep] + index_text + ' ' + line[sep:]
                for j in range(i+1, depth):
                    index[j] = 0
                break
            except StopIteration:
                pass
        new_text = new_text + line + '\n'
    return(new_text)


def create_toc(md_text, depth=3):
    lines = iter(md_text.splitlines())
    toc = toc_info
    new_text = ''
    for line in lines:
        for i in range(depth):
            head = '#' * (i+2)
            try:
                sep = next(re.finditer('^ *(%s) '%(head), line)).end()
                title = line[sep:]
                link = title.replace(' ', '-').replace('.', '')
                new_toc = ('\t'*i) + '* ' + '[' + title + ']' + '(#' + link + ')'
                line = line[:sep] + '<span id="' + link + '">' + line[sep:] + '</span>'
                toc = toc + new_toc + '\n'
                break
            except StopIteration:
                pass
        new_text = new_text + line + '\n'
    toc = toc + toc_info
    new_text = toc + '\n' + new_text
    return new_text


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('input_file', help='input file name.')
    parser.add_argument('output_file', help='output file name.', default = '', nargs='?')
    parser.add_argument('-i', '--index-depth', help="max index depth", type=int)
    parser.add_argument('-t', '--toc-depth', help="max toc depth", type=int)
    parser.add_argument('--no-toc', help="don't create content", action='store_true')
    parser.add_argument('--no-index', help="don't create index", action='store_true')
    args = parser.parse_args()
    infile = args.input_file
    current_path = os.getcwd()
    filepath = os.path.normpath(os.path.join(current_path, infile))

    if args.index_depth:
        index_depth = args.index_depth
    else:
        index_depth = 3
    if args.toc_depth:
        toc_depth = args.toc_depth
    else:
        toc_depth = 3

    try:
        with open(filepath, 'r', encoding='UTF-8') as f:
            md_text = f.read()
    except FileNotFoundError as e:
        print('No such file.')
        return
    if not args.no_index:
        md_text = create_index(md_text, index_depth)
    if not args.no_toc:
        md_text = delete_toc(md_text)
        md_text = create_toc(md_text, toc_depth)
    if args.output_file == '':
        outfile = infile.rstrip('.md') + '_revised.md'
        outfile = os.path.normpath(os.path.join(current_path, outfile))
    with open(outfile, 'w', encoding='UTF-8') as f:
        f.write(md_text)
    print('Finished.')
    return 0


if __name__ == '__main__':
    main()
